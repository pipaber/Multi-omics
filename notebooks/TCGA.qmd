---
title: "Integrative Analysis with TCGA Data"
subtitle: "Analysis of Mutation Data from The Cancer Genome Atlas (TCGA)"
format: html
editor: visual
---

```{r}
#| include: false
library(knitr)

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  dpi = 180,
  echo = TRUE
)

library(tidyverse)

theme_set(theme_minimal())
```

## Introduction

The Cancer Genome Atlas (TCGA) is a massive cancer genomics project compiling high-throughput multi-omic data on dozens of cancer types for [public access](https://www.cancer.gov/ccg/research/genome-sequencing/tcga).

We are gonna use the `curatedTCGAData` package to manipulate locally to multiple high-throughput datasets from the project. The package provides access to TCGA data that has been curated and stored as a *MultiAssayExperiment* object on the Bioconductor [ExperimentHub](https://bioconductor.org/packages/release/bioc/html/ExperimentHub.html).

First, let's load the packages needed.

```{r}
library(curatedTCGAData)
library(TCGAutils)
library(MultiAssayExperiment)

```

## Download the Data

To download the data we need to use `curatedTCGAData`function. The first argument is a four letter disease (cancer) code (A complete list of disease codes used by the TCGA project are available on the [NCI Genomic Data Commons website](https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/tcga-study-abbreviations)), the second argument is a vector of data types we want to download. We need to specify `dry.run = FALSE` to download the data.

In this specific case, we are gonna work with RNA-Seq data, mutation data and methylation data from Rectum Adenocarcinoma (READ). The clinical data is included by default.

```{r}
#| message: false
#| warning: false
#| label: read-data


readData = curatedTCGAData("READ", 
                           c("RNASeq2GeneNorm", "Mutation", "Methylation_methyl450"), 
                           dry.run = FALSE, version = "2.1.1")

readData # this is a MultiAssayExperiment object
```

## Review the Clinical Metadata

We can see which patients have data for each assay. The assay column gives the experiment type, the primary column gives the unique patient ID and the colname gives the sample ID used as a identifier within a given experiment.

```{r}
sampleMap(readData)
```

Not all patients have data for all assays, and some of them can have multiple data entries for one or more experiment type. This may correspond to multiple biopsies or matched tumor and normal samples from an individual patient.

```{r}
sampleMap(readData) |> 
  as_tibble() |> 
  pull(primary) |> 
  table() |> 
  table()
```

We can see the metadata of the patients with `colData`. Note that there are more than 2000 columns of data per patient (not necessarily complete).

```{r}
clin = colData(readData) |> 
  as_tibble()
dim(clin)

head(colnames(clin), 10) 

```

As an example, for rectum adenocarcinoma, we can see the tumor stage.

```{r}

clin |> 
  pull(pathology_T_stage) |> 
  table()
  
```

Stage T4 have subgroups. To simplify the analysis, let's combine all T4 tumors.

```{r}

clin <- clin |> 
  mutate(t_stage = case_when(
    pathology_T_stage %in% c("t4","t4a","t4b") ~ "t4",
    .default = pathology_T_stage
  ))

clin$t_stage |> 
  table()

```

Also, we can see the vital status (alive=0, deceased=1)

```{r}
clin$vital_status |> 
  table()
```

Or combine tumor status and vital status.

```{r}
table(clin$t_stage, clin$vital_status)
```

## Analyzing Mutation Data

Let's begin analyzing the mutation data. Below is the code to retrieve the mutation data.

```{r}
mut_data = readData[[1]]

mut_data
```

From the inspection of the sample IDs we can see that the mutation colnames match to the **primary** column from he clinical data.

```{r}
mut_sample_ids = colnames(mut_data)
head(mut_sample_ids)

head(clin$patientID)

```

We need to manipulate these by substracting 12 characters.

```{r}

mut_sample_ids <- mut_sample_ids |> 
  stringr::str_sub(1,12)

all(mut_sample_ids %in% clin$patientID)

```

Is important to note that the data stored in `assay(mut_data)` is difficult to work with because is a sparse matrix that has a row for each `GRanges` with a mutation in at least one sample.

```{r}
assay(mut_data)[1:3,1:3]

# Is a sparse matrix

assay(mut_data)[1,] |> 
  table(useNA="ifany")

```

We can get more information if we look at the mutation information for each patient.

```{r}
mut_assay = mut_data@assays

mut_assay # GRangesList

mut_assay |> class()

length(mut_assay)
```

Let's inspect the data from the first patient. We can see from the metadata information the Hugo Symbol, mutation status and predicted effect of each mutation at variant classification.

```{r}
mut_assay[[1]]

mut_assay[[1]]$Hugo_Symbol

mut_assay[[1]]$Mutation_Status |> 
  table()

mut_assay[[1]]$Variant_Classification |> 
  table()

```

Now, is kind of a trouble to inspect manually each patient. So, lets get all mutation information from Hugo symbol and Variant classification for all the patients.

```{r}

var_class_df = mapply(function(sample_id, mutation_assay){
  
  d = mcols(mutation_assay)[,c("Hugo_Symbol","Variant_Classification")] |> 
    as.data.frame()
  
  colnames(d) = c("symbol","variant_class")
  
  d$patientID = sample_id
  
  return(d)
  
}, sample_id=mut_sample_ids, mutation_assay = mut_assay,SIMPLIFY = F, USE.NAMES = F)


var_class_df = do.call(rbind, var_class_df)


head(var_class_df)

```

We can visualize the most common mutated genes genes in rectum adenocarcinoma

```{r}
#| label: fig-genesmut
#| message: false
#| warning: false

p <- var_class_df |> 
  as_tibble() |> 
  group_by(symbol,variant_class) |> 
  summarise(n = n()) |> 
  arrange(desc(n)) |> 
  ungroup() |> 
  slice_max(order_by = n, n = 20) |> 
  ungroup() |> 
  mutate(symbol = fct_reorder(symbol,n)) |> 
  ggplot(aes(n, symbol,fill=variant_class)) +
  geom_col() +
  facet_wrap(~variant_class) +
  paletteer::scale_fill_paletteer_d("awtools::a_palette") +
  labs(x = "Samples with specific mutation", y="Gene Symbol", fill="Variant Class",
       title="Top 20 Samples with READ")


path <- "images/"
ggsave(paste0(path,"samples_with_mut.jpeg"), device = "jpeg")


```

![Samples with specific mutation per gene](images/samples_with_mut.jpeg)
## Linking mutations and tumor stage

Now that we are familiarized with the mutation data, we can link mutations to the tumor stage from the patients with rectum adenocarcinoma.

We can filter the clinical data with the patients that have mutation data.

```{r}
index <- which( (var_class_df$patientID |> unique()) %in% clin$patientID)

clin_and_mutation = clin[index,]

head(clin_and_mutation) 

```

We can count the number of genes with mutations per patient and then make a `left_join` to the clinical data to plot the mutated genes per tumor stage.

```{r}
#| label: fig-plot1


df = var_class_df |> 
  group_by(patientID) |> 
  summarise(n = n())

p <- clin_and_mutation |> 
  left_join(df, by = join_by(patientID)) |> 
  ggplot(aes(t_stage,log(n), fill=t_stage))+
  geom_boxplot() +
  geom_jitter(width = 0.05, colour="red2") +
  paletteer::scale_fill_paletteer_d("awtools::a_palette")+
  labs(x = "Tumor stage", y="Number of mutated genes in log scale")

path <- "images/"
ggsave(paste0(path,"number_mut_genes_per_tumor_stage.jpeg"), device = "jpeg")

```

![Number of mutated genes per tumor stage](images/number_mut_genes_per_tumor_stage.jpeg)

Also, we can focus on a specific gene, e.g. [TP53](https://www.ncbi.nlm.nih.gov/gene/7157).

```{r}
#| label: fig-plot_tp53


mut_on_tp53 <- var_class_df |> 
  dplyr::filter(symbol == "TP53") 


p <-clin_and_mutation |> 
  dplyr::filter(patientID %in%  mut_on_tp53$patientID) |> 
  dplyr::select(t_stage, patientID) |> 
  group_by(t_stage) |> 
  summarise(n = n()) |> 
  # mutate(t_stage = fct_reorder(t_stage,n)) |> 
  ggplot(aes(n, t_stage, fill=t_stage, label=n)) +
  geom_col() +
  geom_label(fill="white")  +
  paletteer::scale_fill_paletteer_d("awtools::a_palette")+
  labs(y = "Tumor Stage", x="NÂ° of Mutations", fill="Tumor Stage", title="Number of Mutations on Gene TP53")

path <- "images/"
ggsave(paste0(path,"number_mut_tp53_per_tumor_stage.jpeg"), device = "jpeg")

```

![Number of mutations on gene TP53 per tumor stage](images/number_mut_tp53_per_tumor_stage.jpeg)

# Linking expression and tumor stage

We also can link the expression data (RNA-Seq) with the tumor stage data from the clinical metadata. [Check the TCGA RNA-Seq protocol online]{.aside}

```{r}
rnaseq = readData[[2]]

rnaseq

```
As before, we need to shorten the sample IDs so they can match to the clinical data.

```{r}

colnames(rnaseq) = colnames(rnaseq) |> 
  stringr::str_sub(1,12)

clin <- clin |> as.data.frame()
rownames(clin) <- clin$patientID

index <- which(colnames(rnaseq) %in% rownames(clin))

colData(rnaseq) = as(clin[colnames(rnaseq),],"DataFrame")


idx <- is.na(colData(rnaseq)$t_stage)

rnaseq <- rnaseq[,!idx]

```

Then, we can use the `limma` package to proceed with the differential expression analysis. In this case, we'll ise the tumor stage as a variable to explain the expression of the genes. 

```{r}

library(limma)
mm = model.matrix(~t_stage, data=colData(rnaseq))
f1 = lmFit(assay(rnaseq), mm)
ef1 = eBayes(f1)
topTable(ef1) |> 
  arrange(desc(AveExpr))

```

Let's visualize two of the most expressed genes.

```{r}
par(mfrow=c(1,2))
boxplot(split(assay(rnaseq)["PAM",], rnaseq$t_stage), main="PAM")    # higher expression in lower t_stage
boxplot(split(assay(rnaseq)["PAIP2",], rnaseq$t_stage), main="PAIP2")
```

# Linking methylation and expression

Finally, we can use the methylation data with the expression data. This is important because methylated cytosines of the DNA change the expression of the genes.

Some patients have methylation data for multiples tissue types. This information is encoded in the fourth component of the sample names. The code `01A` correspond to primary tumor samples and the code `11A` correspond to normal tissue. We'll keep the primary tumor samples.

```{r}

methyl <- readData[[3]]

idx <- colnames(methyl) |> 
  str_split(pattern = "-") |> 
  map(4) |> 
  enframe() |> 
  unnest(value)

idx <- which(idx$value == "01A")

methyl = methyl[,idx]

methyl
```

As before, let's truncate the names of the sample to match the clinical data.

```{r}
colnames(methyl) <- colnames(methyl) |> 
  str_sub(start = 1,end = 12)
```

We can add the clinical data to the methyl object and count the number of patients with methylation and transcription data.

```{r}
colData(methyl) <- as(clin[colnames(methyl),],"DataFrame")


intersect(colnames(methyl), colnames(rnaseq)) |> length()

```

Let's subset common sample names and check the methylation data as row ranges.

```{r}

methyl_subset = methyl[,which(colnames(methyl) %in% colnames(rnaseq))]
rnaseq_subset = rnaseq[,which(colnames(rnaseq) %in% colnames(methyl))]

methyl_genes = rowData(methyl_subset)
methyl_genes

```

This function takes a gene symbol and returns a scatter plot showing the relationship between 3 different sites near that gene and gene expression.

```{r}

#| label: figplot

me_rna_cor = function(sym, mpick = 3){
    require(GGally)
    # subset methylation data to first mpick methylation sites for given gene symbol
    methyl_ind = which(methyl_genes$Gene_Symbol == sym)
    if (length(methyl_ind) > mpick){    
        methyl_ind = methyl_ind[1:mpick]
    }
    methyl_dat = assay(methyl_subset)[methyl_ind,]    # subset to selected methylation sites

    # subset expression data to selected gene symbol
    expr_ind = which(rownames(rnaseq_subset) == sym)    
    expr_dat = assay(rnaseq_subset)[expr_ind,]

    # combine methylation and expression data as data frame
    combined_dat = as(t(methyl_dat), "DataFrame")
    combined_dat$expr = expr_dat

    # plot pairs and calculate correlation coefficients between methylation and expression
    ggpairs(combined_dat) |> print()
    sapply(1:mpick, function(i){
      
        cor_to <- as.numeric(combined_dat[,mpick+1])
        
        df <- data.frame(v1= as.numeric(combined_dat[,i]),
                         v2 = cor_to)
        
        df <- df |> na.omit()
      
        cor(df[,1], df[,2])
    })
}

me_rna_cor("TAC1", mpick=3)

```

